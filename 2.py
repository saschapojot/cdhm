# -*- coding: utf-8 -*-"""Created on Thu May 10 15:39:50 2018Figure 2 in Longwen's EPJB@author: e0272499"""import numpy as npimport matplotlib.pyplot as pltfrom numpy import pi#parameterT = 2V = 2*piJ = 2*pi/3beta = 3*pi/4max_q = 5N = T*1000          #Total number of kickOmega = 2*pi/Tdt = T/Nt = np.linspace(0,T,N)#generate alpha = p/qp_total = np.array([])q_total = np.array([])for q in range(2,max_q+1):    for p in range(1,q):        q_total = np.append(q_total,q)        p_total = np.append(p_total,p)        print("q: ",q_total)        print("p: ",p_total)alpha = p_total/q_total#test for specific  p qtry_p = 25try_q = 50try_alpha = try_p/try_qL = try_qlattice = np.arange(1,L+1)K = np.linspace(-pi,pi,L)U1 = np.zeros([L,L],dtype=complex)        #Unitary matrixU3 = np.zeros([L,L],dtype=complex)for m in range(L):    for n in range(L):        U1[m][n] = np.exp(-1j*2*pi*m*n/L)/np.sqrt(L)        U3[m][n] = np.exp( 1j*2*pi*m*n/L)/np.sqrt(L)def p_to_x(T):    """    Chang from p representation to x representation    """    temp = np.dot(T,U3)    return np.dot(U1,temp)def Driving(t,alpha,beta,m):    """    The driving term    """    return V*np.cos(2*pi*alpha*m-beta)*np.cos(Omega*t)    def T(k):    """    hopping term     """    return J*np.cos(k)#calcualte U using the split operator methodM2_p = np.diag(np.exp( -1j*T(K)*dt) )M2 = p_to_x(M2_p)U = np.eye(L,dtype = complex)for i in range(N):    M1 = np.diag(np.exp(-1j*Driving(t[i],try_alpha,beta,lattice)*dt/2) )    temp1 = np.dot(M2,M1)    temp2 = np.dot(M1,temp1)    U = np.dot(temp2,U)eigenvalue = np.linalg.eigvals(U)omega = np.angle(eigenvalue)/pi        